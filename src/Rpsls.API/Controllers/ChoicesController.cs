using FluentValidation;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.ModelBinding;
using Rpsls.API.Services;

namespace Rpsls.API.Controllers
{
    [ApiController]
    [Route("api/v{version:apiVersion}/[controller]")]
    [ApiVersion("1.0")]  // Defines version 1.0 of this controller
    [ApiVersion("2.0")]  // Defines version 2.0 of this controller
    public class ChoicesController : ControllerBase
    {
        private readonly IGameService _gameService;
        private readonly IValidator<int> _inputValidator;

        public ChoicesController(IGameService gameService, IValidator<int> inputValidator)
        {
            _gameService = gameService;
            _inputValidator = inputValidator;
        }

        /// <summary>
        /// Retrieves the list of all possible choices (Rock, Paper, Scissors, Lizard, Spock).
        /// </summary>
        /// <returns>A list of choices in the game.</returns>
        [HttpGet("choices")]
        public async Task<IActionResult> GetChoices()
        {
            var choices = await _gameService.GetChoicesAsync();
            return Ok(choices);
        }

        /// <summary>
        /// Retrieves a random choice generated by the computer.
        /// </summary>
        /// <returns>The computer's randomly selected choice.</returns>
        [HttpGet("choice")]
        public async Task<IActionResult> GetChoice()
        {
            var choice = await _gameService.GetChoice();
            return Ok(choice);
        }

        /// <summary>
        /// Plays a game round based on the user's choice and the computer's random choice.
        /// </summary>
        /// <param name="userChoiceId">The ID of the user's selected choice (1-5).</param>
        /// <returns>The result of the game (win, lose, or draw) based on the user's and computer's choices.</returns>
        /// <response code="400">Returns if the userChoiceId is invalid.</response>
        /// <response code="500">Returns if an internal server error occurs during the game process.</response>
        [HttpPost("play")]
        public async Task<IActionResult> PlayGame(int userChoiceId)
        {
            // Validate input
            var validationResult = await _inputValidator.ValidateAsync(userChoiceId);
            if (!validationResult.IsValid)
            {
                return BadRequest(validationResult.Errors);
            }

            try
            {
                var result = await _gameService.PlayGameAsync(userChoiceId);
                return Ok(result);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
            catch (Exception)
            {
                return StatusCode(500, "An error occurred while processing your request.");
            }
        }
    }
}